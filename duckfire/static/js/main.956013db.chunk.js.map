{"version":3,"sources":["assets/svg/coin.svg","Components/Weapons/index.js","Components/Player/player.js","Components/Player/context.js","Components/Game/info.js","Components/Monster/index.js","Components/Monster/Duck.js","Components/Game/index.js","Components/Player/data.js","Components/Dashboard/index.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Weapon","name","damage","bullets","this","durability","storagedData","localStorage","getItem","Player","saveData","bind","data","JSON","parse","level","record","score","coins","weapon","inventory","weapons","sling","item","status","toLowerCase","hasOwnProperty","setItem","stringify","PlayerContext","React","createContext","player","GamePlayInfo","props","state","setRecord","setScore","setState","lvl","setLevel","className","Component","Monster","scale","dodge","playerLvl","calcolateProbability","dodgeProbability","successProbability","probability","value","getScale","calcScale","Math","random","initialPosition","start","floor","end","Duck","shotProbability","pairs","n","match","find","last","array","length","shotResult","onClick","life","context","shotStatus","monster","getDamage","death","id","monsterValue","startMoviment","self","visibility","domElement","minLeft","maxLeft","minTop","maxTop","timeAlive","Anime","targets","opacity","top","left","easing","begin","anim","duration","complete","playerCheck","alive","componentDidMount","element","ReactDOM","findDOMNode","elementWidth","offsetWidth","gameWidth","elementHeight","offsetHeight","gameHeight","thisDuck","width","height","elementId","style","transform","contextType","Game","generateMonster","enemies","push","Type","generateMonsterSkill","monsterDeath","monsterScore","console","log","renderMonster","monsters","Fragment","map","i","key","runTick","game","counter","tickTime","tick","oneWay","recursive","setTimeout","document","getElementById","restartGame","exitGame","addEventListener","keydownFunction","event","keyCode","removeEventListener","display","PlayerData","src","CoinSvg","alt","Dashboard","to","Consumer","App","Provider","exact","path","Boolean","window","location","hostname","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.956013db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coin.4df1288f.svg\";","class Weapon {\n    constructor(name, damage, bullets) {\n        this.name       = name;\n        this.durability = 100;\n        this.damage     = damage;\n\n        if (bullets > 0) {\n            this.bullets = bullets;\n        }\n    }\n}\n\nexport default Weapon;","import Weapon from \"../Weapons\";\n\nconst storagedData = localStorage.getItem(\"player\");\n\nclass Player {\n    constructor() {\n        this.saveData = this.saveData.bind(this);\n\n        if (storagedData !== null) {\n            const data = JSON.parse(storagedData);\n            // assign pre-saved data\n            this.level = data.level;\n            this.record = data.record;\n            this.score = data.score;\n\n            this.name = data.name;\n            this.coins = data.coins;\n\n            this.weapon = data.weapon;\n            this.inventory = data.inventory;\n        } else {\n            this.level = 1;\n            this.record = 0;\n            this.score = 0;\n\n            this.name = \"PlayerUnknown\";\n            this.coins = 0;\n            \n            // weapon\n            this.weapon = 'Sling';\n            this.inventory = {\n                weapons: {\n                    sling: new Weapon('Sling', 5, 0)\n                }\n            };\n        }\n\n        this.saveData();\n    }\n\n    // setters\n    setName(name) {\n        this.name = name;\n        this.saveData();\n    }\n\n    setLevel(level) {\n        this.level = level;\n        this.saveData();\n    }\n\n    setRecord(record) {\n        this.record = record;\n        this.saveData();\n    }\n\n    setScore(score) {\n        this.score = score;\n        this.saveData();\n    }\n\n    // inventory handlers\n    updateWeapon(item, status) {\n        if (status) {\n            this.inventory.weapons[item] = status;\n        } else {\n            delete this.inventory.weapons[item];\n        }\n        this.saveData();\n    }\n\n    getDamage() {\n        const weapon = this.inventory.weapons[this.weapon.toLowerCase()];\n\n        if (weapon.hasOwnProperty('bullets')) {\n            if (weapon.bullets > 0) {\n                weapon.bullets = weapon.bullets - 1;\n            } else {\n                return 0; // means no bullets\n            }\n        }\n        \n        return weapon.damage;\n    }\n\n    saveData() {\n        localStorage.setItem(\"player\", JSON.stringify(this));\n    }\n}\n\nexport default Player;\n","import React from \"react\";\n\nimport Player from \"./player\";\nconst PlayerContext = React.createContext({ player: \"unknown\" });\n\nexport { Player, PlayerContext };\n","import React from \"react\";\n\nclass GamePlayInfo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const {level, record} = this.props.player;\n\n        this.state = {\n            level,\n            record\n        };\n    }\n\n    updateScore(score) {\n        if (this.state.record < this.props.score) {\n            this.props.player.setRecord(score);\n            this.props.player.setScore(score);\n            this.setState({\n                record: score\n            });\n        } else {\n            this.props.player.setScore(score);\n        }\n    }\n\n    updateLevel(lvl) {\n        this.props.player.setLevel(lvl);\n        this.setState({\n            level: lvl\n        });\n    }\n\n    render() {\n        const { score } = this.props;\n\n        return (\n            <div className=\"player__information\">\n                <div className=\"score info__box\">\n                    <div className=\"data\">\n                        <span className=\"item\">Score:</span>\n                        <span className=\"value\">{score}</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default GamePlayInfo;\n","class Monster {\n    /**\n     *\n     * @param {number} scale 0.3 to 2\n     * @param {number} dodge 10 to 50\n     * @param {number} playerLvl 1 to 100\n     */\n    constructor(scale, dodge, playerLvl) {\n        this.dodge = (dodge * playerLvl) / 100;\n        \n        this.initialPosition();\n        this.getScale(scale);\n        this.calcolateProbability();\n    }\n\n    calcolateProbability = () => {\n        const dodgeProbability      = this.dodge,\n              successProbability    = 100 - this.dodge;\n        \n        this.probability = [\n            {value: false, probability: dodgeProbability},\n            {value: true, probability: successProbability}\n        ];\n    }\n\n    getScale = (scale) => {\n        // calcs dimensions based on random and playerLvl\n        const scaleRandom = Math.random() * 2;\n        const calcScale = (scale + scaleRandom) / 2;\n\n        if (calcScale < 0.45) {\n            this.scale = 0.45;\n        } else {\n            this.scale = calcScale;\n        }\n    }\n\n    initialPosition = () => {\n        // from 0 to 2 chose the side of the window where the monster start\n        this.start  = Math.floor(Math.random() * 2); \n        this.end = this.start; // assign as default data\n        \n        // from 0 to 2 chose the side of the window where the monster has to leave\n        while (this.end === this.start) {\n            this.end = Math.floor(Math.random() * 2);\n        }\n    }\n}\n\nexport default Monster;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Anime from \"animejs\";\n\nimport Monster from \"./index\";\nimport { PlayerContext } from \"../Player/context\";\n\nclass Duck extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // ducks data\n        const thisDuck = new Monster(\n            this.props.monster.scale,\n            this.props.monster.dodge,\n            this.props.level\n        )\n\n        this.state = {\n            ...thisDuck,\n            // default data\n            width:          100,\n            height:         100,\n            life:           20,\n            monsterValue:   200,\n\n            domElement:     '',\n            minLeft:        0,\n            maxLeft:        0,\n            minTop:         0,\n            maxTop:         0,\n\n            timeAlive:      0,\n\n            // instance\n            id:             this.props.id,\n            elementId:      \"duck_\" + this.props.id,\n            \n            // to popolate on first move\n            visibility:     false\n        };\n\n        this.onClick        = this.onClick.bind(this);\n        this.startMoviment  = this.startMoviment.bind(this);\n    }\n\n    shotProbability = (pairs) => {\n        const n = Math.random() * 100;\n        const match = pairs.find(({probability}) => n <= probability);\n        return match ? match.value : this.last(pairs).value;\n    }\n      \n    last = (array) => {\n        return array[array.length - 1];\n    }\n      \n    shotResult = () => {\n        const checkThisShot = this.shotProbability(this.state.probability);\n        return checkThisShot;\n    }\n\n    onClick = () => {\n        const { life } = this.state;\n        const { player } = this.context;\n        const shotStatus = this.shotResult();\n\n        if (this.props.monster.status) {\n            if (shotStatus) {\n                const damage = player.getDamage();\n\n                if (damage > 0) {\n                    this.setState({\n                        life: life - damage\n                    }, function () {\n                        if (this.state.life <= 0) {\n                            this.props.death(this.state.id, this.state.monsterValue);\n                        }\n                    })\n                } else {\n                    // TODO: stop game and ask to change weapon because there are no bullets\n                }\n            }\n\n            // monster is already death \n        }\n    };\n\n    startMoviment = () => {\n        const self = this;\n        const { status } = this.props.monster;\n        const { \n            visibility,\n            domElement,\n            minLeft,\n            maxLeft,\n            minTop,\n            maxTop,\n            timeAlive\n        } = this.state;\n\n        if (status) {\n            Anime({\n                targets: domElement,\n                opacity: function () {\n                    if (timeAlive > 0) {\n                        return 1;\n                    }\n                    return 0;\n                },\n                top: function() {\n                    return Anime.random(minTop, maxTop);\n                },\n                left: function() {\n                    return Anime.random(minLeft, maxLeft);\n                },\n                easing: 'easeInOutQuad',\n                begin: function(anim) {\n                    if (!visibility) {\n                        self.setState({\n                            visibility: true\n                        });\n                    }\n                },\n                duration: 2500,\n                complete: this.startMoviment\n            });\n        }\n\n        this.setState({timeAlive: timeAlive + 1}, function () {\n            // self.playerCheck(timeAlive);\n        });\n    }\n\n    playerCheck = (alive) => {\n        if (alive > 5) {\n            // TODO: Remove a life to player\n        }\n    }\n\n    componentDidMount = () => {\n        const   self            = this,\n                element         = ReactDOM.findDOMNode(this),\n                elementWidth    = element.offsetWidth,\n                minLeft         = elementWidth / 2,\n                maxLeft         = this.props.gameWidth - elementWidth,\n                elementHeight   = element.offsetHeight,\n                minTop          = elementHeight / 2,\n                maxTop          = this.props.gameHeight - elementHeight;\n\n        this.setState({\n            domElement: element,\n            minLeft,\n            maxLeft,\n            minTop,\n            maxTop\n        }, function() {\n            self.startMoviment();\n        });\n    }\n\n    render() {\n        if (this.props.monster.status) {\n            return (\n                <div\n                    className=\"duck\"\n                    style={{\n                        visibility: this.state.visibility ? 'visible' : 'hidden',\n                        opacity: 0,\n                        width: this.state.width,\n                        height: this.state.height,\n                        transform: \"scale(\" + this.state.scale + \")\"\n                    }}\n                    id={this.state.elementId}\n                    onClick={this.onClick}\n                ></div>\n            );\n        }\n\n        return null;\n    }\n}\n\nDuck.contextType = PlayerContext;\n\nexport default Duck;\n","import React from \"react\";\n\nimport GameplayInfo from \"./info\";\nimport Duck from \"../Monster/Duck\";\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            game: 1,\n            gameWidth: 0,\n            gameHeight: 0,\n            player: this.props.player,\n            enemies: [],\n            score: 0\n        };\n\n        // exit from game\n        this.keydownFunction    = this.keydownFunction.bind(this);\n\n        this.generateMonster    = this.generateMonster.bind(this);\n        this.monsterDeath       = this.monsterDeath.bind(this);\n    }\n\n    generateMonster = () => {\n        const self = this;\n        const { enemies } = self.state;\n\n        enemies.push({\n            Type: Duck,\n            data: {\n                monster: self.generateMonsterSkill(),\n                level: self.props.player.level\n            }\n        });\n\n        self.setState({ enemies });\n    };\n\n    monsterDeath = (id, monsterScore) => {\n        const { enemies, score } = this.state;\n\n        enemies[id].data.monster.status = false;\n\n        this.setState({\n            enemies,\n            score: score + monsterScore\n        }, function () {\n            console.log('Killed: ' + id);\n        });\n    };\n\n    generateMonsterSkill = () => {\n        let scale   = Math.floor(Math.random() * 2),\n            status  = true,\n            dodge   = Math.floor(Math.random() * 41) + 10;\n\n        return { dodge, scale, status };\n    };\n\n    renderMonster = monsters => {\n        const self = this;\n\n        return (\n            <React.Fragment>\n                {monsters.map(({ Type, data }, i) => (\n                    <Type\n                        monster={data.monster}\n                        level={data.level}\n                        death={self.monsterDeath}\n                        gameWidth={self.state.gameWidth}\n                        gameHeight={self.state.gameHeight}\n                        state={data.state}\n                        id={i}\n                        key={i}\n                    ></Type>\n                ))}\n            </React.Fragment>\n        );\n    };\n\n    runTick = () => {\n        const self = this;\n        \n        if (this.state.game) {\n            let counter = this.tickTime(self.props.player.level);\n\n            this.tick({ oneWay: self.generateMonster, counter }, self.runTick);\n        }\n    };\n\n    tick = ({ oneWay, counter }, recursive) => {\n        const self = this;\n\n        setTimeout(() => {\n            if (self.state.game) {\n                oneWay();\n                recursive();\n            }\n        }, counter);\n    };\n\n    tickTime = lvl => {\n        let tickTime;\n\n        tickTime = Math.random() * 1000 + (1000 - lvl * 5);\n\n        return Math.floor(tickTime);\n    };\n\n    componentDidMount = () => {\n        this.setState({\n            gameWidth: document.getElementById('game__play').offsetWidth,\n            gameHeight: document.getElementById('game__play').offsetHeight\n        });\n\n        this.runTick();\n\n        this.bind();\n    };\n\n    keydownFunction(event){\n        if (event.keyCode === 27) {\n            this.exitGame();\n        } else if (event.keyCode === 13 || event.keyCode === 32) {\n            this.restartGame();\n        }\n    }\n\n    restartGame = () => {\n        const self = this;\n\n        if (!this.state.game) {\n            this.setState({\n                game: 1,\n                enemies: [],\n                score: 0\n            }, () => {\n                self.runTick()\n            });\n        }\n    }\n\n    exitGame = () => {\n        this.setState({ game: 0, enemies: [] });\n    }\n\n    bind = () => {\n        document.addEventListener(\"keydown\", this.keydownFunction, false);\n        document.addEventListener(\"keydown\", this.keydownFunction, false);\n    }\n\n    componentWillUnmount(){\n        document.removeEventListener(\"keydown\", this.keydownFunction, false);\n    }\n\n    render() {\n        const monsters = this.renderMonster(this.state.enemies);\n\n        return (\n            <div id=\"game__play\">\n                <div \n                    className=\"exit\"\n                    onClick={this.exitGame}\n                    style={{display: this.state.game ? 'block' : 'none'}}\n                >\n                    <span>EXIT</span>\n                </div>\n                <div \n                    className=\"play\" \n                    style={{display: this.state.game ? 'none' : 'block'}} \n                    onClick={this.restartGame}\n                >\n                    <span>PLAY</span>\n                </div>\n                <GameplayInfo player={this.state.player} score={this.state.score} />\n                {monsters}\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React from \"react\";\n\nimport CoinSvg from \"../../assets/svg/coin.svg\";\n\nclass PlayerData extends React.Component {\n    render() {\n        return (\n            <div className=\"player__data\">\n                <div className=\"name\">\n                    <h2>{this.props.player.name}</h2>\n                </div>\n                <div className=\"coins\">\n                    <span className=\"item\">\n                        <img\n                            className=\"coin__flip\"\n                            src={CoinSvg}\n                            alt=\"coin-face\"\n                        />\n                        <span className=\"coin__label\">Coins</span>\n                    </span>\n                    <span className=\"value\">{this.props.player.coins}</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PlayerData;\n","import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nimport { PlayerContext } from \"../Player/context\";\nimport PlayerData from \"../Player/data\";\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: \"\"\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"game__dashboard__wrapper\">\n                <div className=\"game__dashboard\">\n                    <div className=\"game__logo\">\n                        <img\n                            alt=\"logo\"\n                            src=\"https://via.placeholder.com/350x150\"\n                        />\n                    </div>\n                    <div className=\"game__navigator\">\n                        <div className=\"game__link game__button\">\n                            <Link to=\"/duckfire/play\">Play Game</Link>\n                        </div>\n                        {/*\n                        <div className=\"game__link game__button\">\n                            <Link to=\"/duckfire/inventory\">Inventory</Link>\n                        </div>\n                        <div className=\"game__link game__button\">\n                            <Link to=\"/duckfire/shop\">Shop</Link>\n                        </div>\n                        <div className=\"game__link game__button\">\n                            <Link to=\"/duckfire/profile\">Profile</Link>\n                        </div>\n                        */}\n                    </div>\n                </div>\n                <PlayerContext.Consumer>\n                    {({ player }) => <PlayerData player={player} />}\n                </PlayerContext.Consumer>\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n","import React from \"react\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport { Player, PlayerContext } from \"./Player/context\";\nimport Game from \"./Game\";\nimport Dashboard from \"./Dashboard\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            player: new Player()\n        };\n    }\n\n    render() {\n        return (\n            <PlayerContext.Provider value={{ player: this.state.player }}>\n                <Router>\n                    <div className=\"game__wrapper\">\n                        <div className=\"game__scene\">\n                            <React.Fragment>\n                                <Route exact path=\"/duckfire\">\n                                    <Dashboard player={this.state.player} />\n                                </Route>\n                                <Route exact path=\"/duckfire/play\">\n                                    <PlayerContext.Consumer>\n                                        {({ player }) => (\n                                            <Game player={player} />\n                                        )}\n                                    </PlayerContext.Consumer>\n                                </Route>\n                                <Route exact path=\"/duckfire/inventory\">\n                                    <Dashboard player={this.state.player} />\n                                </Route>\n                                <Route exact path=\"/duckfire/profile\">\n                                    <Dashboard player={this.state.player} />\n                                </Route>\n                                <Route exact path=\"/duckfire/shop\">\n                                    <Dashboard player={this.state.player} />\n                                </Route>\n                            </React.Fragment>\n                        </div>\n                    </div>\n                </Router>\n            </PlayerContext.Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/style.scss';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}